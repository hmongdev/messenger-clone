// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User { 
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Chat relation
  chatId String[] @db.ObjectId // field 'chatId' => array of strings
  chats Chat[] @relation(fields: [chatId], references: [id]) // link between 'User' and 'Chat' models
  
  // SeenMessages relation
  seenMessagesIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessagesIds], references: [id])
  
  accounts Account[]
  messages Message[]
}

// Account model
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  
  // User relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId]) // provider + providerAccountId need to be unique
}

// Chat model
model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  // Message relation
  messageIds String[] @db.ObjectId
  messages Message[]
  
  // User relation
  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

// Message model
model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())
  
  // Seen relation
  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])
  
  // Chat relation
  chatId String[] @db.ObjectId
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  // Sender relation
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}